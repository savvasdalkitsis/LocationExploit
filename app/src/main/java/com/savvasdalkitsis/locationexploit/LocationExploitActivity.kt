package com.savvasdalkitsis.locationexploit

import android.annotation.SuppressLint
import android.content.Intent
import android.content.pm.PackageManager
import android.net.Uri
import android.os.Bundle
import android.view.Menu
import android.view.MenuItem
import kotlinx.android.synthetic.main.activity_location_exploit.*
import java.io.File
import java.text.DateFormat

private const val PERMISSION_REQUEST = 998
private const val IMAGE_REQUEST = 999

@SuppressLint("SetTextI18n")
class LocationExploitActivity : MapActivity(R.layout.activity_location_exploit) {

    private var photoUri: Uri? = null
    private val dateFormat by lazy { DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.SHORT) }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setSupportActionBar(view_toolbar)

        view_selfie.setOnClickListener {
            view_label.text = ""
            clearMarkers()
            photoUri = Uri.fromFile(File(CameraRequest.askForPhoto(this, IMAGE_REQUEST)))
        }
        view_camera_roll.setOnClickListener {
            if (Permissions.hasReadStoragePermissionOrAsk(this, PERMISSION_REQUEST)) {
                scanPhotos()
            }
        }
        About.maybeShowDialog(this)
    }

    private fun scanPhotos() {
        view_label.text = "Your location history (tap on pins for details)"
        clearMarkers()
        PhotoHandler.scanPhotos(this,
                handlePhoto = { (lat, lon), date ->
                    addMarker(lat, lon, "You were here on ${dateFormat.format(date)}")
                },
                onFinish = { fitAllMarkers() }
        )
    }

    private fun photoTaken() {
        PhotoHandler.extractPhotoLocation(this, photoUri) { location ->
            if (location != null) {
                val (lat, lon) = location
                addMarker(lat, lon, "You are here")
                positionCamera(lat, lon, 16.0)
                view_label.text = "You are at ${lat.format()},${lon.format()}"
            } else {
                view_label.text = "Your camera is safe. No location can be extracted"
            }
        }
    }

    override fun onCreateOptionsMenu(menu: Menu?): Boolean {
        super.onCreateOptionsMenu(menu)
        menuInflater.inflate(R.menu.menu_main, menu)
        return true
    }

    override fun onOptionsItemSelected(item: MenuItem): Boolean = when(item.itemId) {
        R.id.action_about -> {
            About.showDialog(this)
            true
        }
        else -> super.onOptionsItemSelected(item)
    }

    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        super.onActivityResult(requestCode, resultCode, data)
        if (requestCode == IMAGE_REQUEST && resultCode == RESULT_OK) {
            photoTaken()
        }
    }

    override fun onRequestPermissionsResult(requestCode: Int, permissions: Array<out String>, grantResults: IntArray) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)
        when (requestCode) {
            PERMISSION_REQUEST -> if (grantResults.getOrNull(0) == PackageManager.PERMISSION_GRANTED) {
                scanPhotos()
            }
        }
    }

    private fun Double.format() = "%.3f".format(this)
}
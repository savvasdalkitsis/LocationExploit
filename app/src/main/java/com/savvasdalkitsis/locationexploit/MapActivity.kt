package com.savvasdalkitsis.locationexploit

import android.os.Bundle
import android.support.v7.app.AppCompatActivity
import android.view.View
import com.mapbox.mapboxsdk.Mapbox
import com.mapbox.mapboxsdk.annotations.MarkerOptions
import com.mapbox.mapboxsdk.camera.CameraPosition
import com.mapbox.mapboxsdk.camera.CameraUpdateFactory
import com.mapbox.mapboxsdk.geometry.LatLng
import com.mapbox.mapboxsdk.geometry.LatLngBounds
import com.mapbox.mapboxsdk.maps.MapboxMap
import kotlinx.android.synthetic.main.activity_location_exploit.*

abstract class MapActivity(private val contentViewResId: Int) : AppCompatActivity() {

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        Mapbox.getInstance(applicationContext, BuildConfig.MAPBOX_ACCESS_TOKEN)
        setContentView(contentViewResId)
        view_map.onCreate(savedInstanceState)
    }

    override fun onStart() {
        super.onStart()
        view_map.onStart()
    }

    override fun onResume() {
        super.onResume()
        view_map.onResume()
    }

    override fun onPause() {
        super.onPause()
        view_map.onPause()
    }

    override fun onSaveInstanceState(outState: Bundle) {
        super.onSaveInstanceState(outState)
        view_map.onSaveInstanceState(outState)
    }

    override fun onLowMemory() {
        super.onLowMemory()
        view_map.onLowMemory()
    }

    override fun onDestroy() {
        super.onDestroy()
        view_map.onDestroy()
    }

    fun addMarker(lat: Double, lon: Double, title: String) {
        withMap {
            view_map.visibility = View.VISIBLE
            it.addMarker(MarkerOptions()
                    .position(LatLng(lat, lon))
                    .title(title))
        }
    }

    fun clearMarkers() {
        withMap { it.clear() }
    }

    fun fitAllMarkers() {
        withMap {
            val positions = it.markers.map { it.position }
            when {
                positions.size > 1 -> positionCamera(LatLngBounds.Builder()
                        .includes(positions)
                        .build())
                positions.size == 1 -> {
                    val position = positions[0]
                    positionCamera(position.latitude, position.longitude, 16.0)
                }
                else -> positionCamera(LatLngBounds.world())
            }
        }
    }

    private fun positionCamera(bounds: LatLngBounds) {
        withMap {
            it.easeCamera(CameraUpdateFactory.newLatLngBounds(bounds, 150))
        }
    }

    fun positionCamera(lat: Double, lon: Double, zoom: Double) {
        withMap {
            view_map.visibility = View.VISIBLE
            it.cameraPosition = CameraPosition.Builder()
                    .zoom(zoom)
                    .target(LatLng(lat, lon))
                    .build()
        }
    }

    private fun withMap(mapAction: (MapboxMap) -> Unit) = view_map.getMapAsync(mapAction)
}
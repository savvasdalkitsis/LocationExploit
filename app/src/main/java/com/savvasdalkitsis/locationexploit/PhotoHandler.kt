package com.savvasdalkitsis.locationexploit

import android.app.Activity
import android.app.LoaderManager
import android.content.CursorLoader
import android.content.Loader
import android.database.Cursor
import android.net.Uri
import android.os.Bundle
import android.provider.MediaStore
import android.support.media.ExifInterface
import java.util.*

object PhotoHandler {

    fun extractPhotoLocation(activity: Activity, photoUri: Uri?, location: (location: Pair<Double, Double>?) -> Unit) = with(activity) {
        contentResolver.openInputStream(photoUri).use { stream ->
            val latLon = ExifInterface(stream).latLong
            if (latLon != null) {
                location(Pair(latLon[0], latLon[1]))
            } else {
                location(null)
            }
        }
    }

    fun scanPhotos(activity: Activity, handlePhoto: (location: Pair<Double, Double>, date: Date) -> Unit, onFinish: () -> Unit) {
        activity.loaderManager.initLoader(1, null, object : LoaderManager.LoaderCallbacks<Cursor> {
            override fun onCreateLoader(id: Int, args: Bundle?): Loader<Cursor> {
                val projection = arrayOf(
                        MediaStore.Images.Media.LATITUDE,
                        MediaStore.Images.Media.LONGITUDE,
                        MediaStore.Images.Media.DATE_TAKEN
                )
                return CursorLoader(activity, MediaStore.Images.Media.EXTERNAL_CONTENT_URI, projection, null, null, null)
            }

            override fun onLoadFinished(loader: Loader<Cursor>?, data: Cursor) {
                if (data.moveToFirst()) {
                    val latC = data.getColumnIndex(MediaStore.Images.Media.LATITUDE)
                    val lonC = data.getColumnIndex(MediaStore.Images.Media.LONGITUDE)
                    val dateC = data.getColumnIndex(MediaStore.Images.Media.DATE_TAKEN)
                    do {
                        val lat = data.getDouble(latC)
                        val lon = data.getDouble(lonC)
                        val date = Date(data.getLong(dateC))
                        if (lat != 0.0 || lon != 0.0) {
                            handlePhoto(Pair(lat, lon), date)
                        }
                    } while (data.moveToNext())
                    onFinish()
                }
            }

            override fun onLoaderReset(loader: Loader<Cursor>?) {}

        })
    }
}